#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥ –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏—Ö –∫–ª–∞—Å—Å–æ–≤ –¥–ª—è YOLO –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–∑ JSON —Ñ–∞–π–ª–∞
"""

import json
import os
from pathlib import Path

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
CLASS_MAPPING = {}
CLASS_COLORS = {}
CLASS_CATEGORIES = {}
SYNONYMS = {}
COCO_MAPPING = {}

# –ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
CONFIG_PATH = Path(__file__).parent / "classes_config.json"


def load_config():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    global CLASS_MAPPING, CLASS_COLORS, CLASS_CATEGORIES, SYNONYMS, COCO_MAPPING

    try:
        if CONFIG_PATH.exists():
            with open(CONFIG_PATH, 'r', encoding='utf-8') as f:
                config = json.load(f)

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ –∫–ª–∞—Å—Å–æ–≤ (–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–ª—é—á–∏ –≤ int)
            CLASS_MAPPING = {int(k): v for k, v in config.get('class_mapping', {}).items()}
            CLASS_COLORS = config.get('class_colors', {})
            CLASS_CATEGORIES = config.get('categories', {})
            SYNONYMS = config.get('synonyms', {})

            # –ó–∞–≥—Ä—É–∂–∞–µ–º COCO –º–∞–ø–ø–∏–Ω–≥ (–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–ª—é—á–∏ –≤ int)
            coco_data = config.get('coco_mapping', {})
            COCO_MAPPING = {int(k): v for k, v in coco_data.items()}

            if COCO_MAPPING:
                print(f"‚úÖ COCO –º–∞–ø–ø–∏–Ω–≥: {len(COCO_MAPPING)} –∫–ª–∞—Å—Å–æ–≤")
            return True

        else:
            raise FileNotFoundError(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {CONFIG_PATH}")

    except FileNotFoundError as e:
        print(f"‚ùå {e}")
        print("üí° –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª classes_config.json —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –∫–ª–∞—Å—Å–æ–≤")
        return False

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å JSON —Ñ–∞–π–ª–∞")
        return False


def get_cyrillic_class_name(class_id, fallback_name=None):
    """
    –ü–æ–ª—É—á–∏—Ç—å –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞

    Args:
        class_id (int): ID –∫–ª–∞—Å—Å–∞
        fallback_name (str): –†–µ–∑–µ—Ä–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ

    Returns:
        str: –ö–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞
    """
    if not CLASS_MAPPING:
        if not load_config():
            return fallback_name or f"–∫–ª–∞—Å—Å_{class_id}"

    if class_id in CLASS_MAPPING:
        return CLASS_MAPPING[class_id]

    if fallback_name:
        return str(fallback_name)

    return f"–∫–ª–∞—Å—Å_{class_id}"


def get_class_by_synonym(synonym):
    """
    –ù–∞–π—Ç–∏ –∫–ª–∞—Å—Å –ø–æ —Å–∏–Ω–æ–Ω–∏–º—É

    Args:
        synonym (str): –°–∏–Ω–æ–Ω–∏–º –∫–ª–∞—Å—Å–∞

    Returns:
        str or None: –ù–∞–π–¥–µ–Ω–Ω—ã–π –∫–ª–∞—Å—Å –∏–ª–∏ None
    """
    if not SYNONYMS:
        load_config()

    if synonym:
        synonym_lower = str(synonym).lower().strip()
        return SYNONYMS.get(synonym_lower, None)

    return None


def get_class_color(class_name):
    """
    –ü–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç –∫–ª–∞—Å—Å–∞

    Args:
        class_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞

    Returns:
        str: Hex —Ü–≤–µ—Ç –∫–ª–∞—Å—Å–∞
    """
    if not CLASS_COLORS:
        load_config()

    return CLASS_COLORS.get(class_name, "#808080")


def get_class_color_bgr(class_name):
    """
    –ü–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç –∫–ª–∞—Å—Å–∞ –≤ BGR —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è OpenCV

    Args:
        class_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞

    Returns:
        tuple: BGR —Ü–≤–µ—Ç –¥–ª—è OpenCV
    """
    hex_color = get_class_color(class_name).lstrip('#')
    if len(hex_color) == 6:
        try:
            rgb = tuple(int(hex_color[i:i + 2], 16) for i in (0, 2, 4))
            return (rgb[2], rgb[1], rgb[0])  # RGB -> BGR
        except ValueError:
            pass

    return (128, 128, 128)  # –°–µ—Ä—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é


def is_food_class(class_name):
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–ª–∞—Å—Å –µ–¥–æ–π

    Args:
        class_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞

    Returns:
        bool: True –µ—Å–ª–∏ –∫–ª–∞—Å—Å –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –µ–¥–µ
    """
    if not CLASS_CATEGORIES:
        load_config()

    food_categories = ["–æ—Å–Ω–æ–≤–Ω—ã–µ_–±–ª—é–¥–∞", "–∑–∞–∫—É—Å–∫–∏_–≥–∞—Ä–Ω–∏—Ä—ã", "–¥–µ—Å–µ—Ä—Ç—ã", "–Ω–∞–ø–∏—Ç–∫–∏", "–µ–¥–∞"]

    for category in food_categories:
        if class_name in CLASS_CATEGORIES.get(category, []):
            return True

    return False


def is_tableware_class(class_name):
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–ª–∞—Å—Å –ø–æ—Å—É–¥–æ–π

    Args:
        class_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞

    Returns:
        bool: True –µ—Å–ª–∏ –∫–ª–∞—Å—Å –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –ø–æ—Å—É–¥–µ
    """
    if not CLASS_CATEGORIES:
        load_config()

    return class_name in CLASS_CATEGORIES.get("–ø–æ—Å—É–¥–∞_–ø—Ä–∏–±–æ—Ä—ã", []) or \
        class_name in CLASS_CATEGORIES.get("–ø–æ—Å—É–¥–∞", [])


def get_classes_by_category(category):
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–ª–∞—Å—Å–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

    Args:
        category (str): –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

    Returns:
        list: –°–ø–∏—Å–æ–∫ –∫–ª–∞—Å—Å–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    """
    if not CLASS_CATEGORIES:
        load_config()

    return CLASS_CATEGORIES.get(category, [])


def auto_detect_classes_from_model(model_path):
    """
    –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ –∏–∑ –º–æ–¥–µ–ª–∏ (–∑–∞–≥–ª—É—à–∫–∞)

    Args:
        model_path (str): –ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏

    Returns:
        bool: True –µ—Å–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
    """
    print(f"üîç –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ –∏–∑ –º–æ–¥–µ–ª–∏: {Path(model_path).name}")

    try:
        from ultralytics import YOLO
        model = YOLO(model_path)

        if hasattr(model, 'names') and model.names:
            model_classes = model.names
            print(f"üìã –ú–æ–¥–µ–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç {len(model_classes)} –∫–ª–∞—Å—Å–æ–≤")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –∫–ª–∞—Å—Å–æ–≤
            for i, (class_id, class_name) in enumerate(list(model_classes.items())[:5]):
                cyrillic_name = get_class_by_synonym(class_name) or class_name
                print(f"   {class_id}: {class_name} -> {cyrillic_name}")

            if len(model_classes) > 5:
                print(f"   ... –∏ –µ—â–µ {len(model_classes) - 5}")

        return True

    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: {e}")
        return False


def get_coco_class_name(class_id):
    """
    –ü–æ–ª—É—á–∏—Ç—å –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è COCO –∫–ª–∞—Å—Å–∞

    Args:
        class_id (int): ID COCO –∫–ª–∞—Å—Å–∞

    Returns:
        str or None: –ö–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ None
    """
    if not COCO_MAPPING:
        if not load_config():
            return None

    return COCO_MAPPING.get(class_id, None)


def reload_config():
    """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞"""
    global CLASS_MAPPING, CLASS_COLORS, CLASS_CATEGORIES, SYNONYMS, COCO_MAPPING

    CLASS_MAPPING.clear()
    CLASS_COLORS.clear()
    CLASS_CATEGORIES.clear()
    SYNONYMS.clear()
    COCO_MAPPING.clear()

    return load_config()


def save_config(new_mapping=None, new_colors=None):
    """
    –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª

    Args:
        new_mapping (dict): –ù–æ–≤—ã–π –º–∞–ø–ø–∏–Ω–≥ –∫–ª–∞—Å—Å–æ–≤
        new_colors (dict): –ù–æ–≤—ã–µ —Ü–≤–µ—Ç–∞ –∫–ª–∞—Å—Å–æ–≤

    Returns:
        bool: True –µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
    """
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        if CONFIG_PATH.exists():
            with open(CONFIG_PATH, 'r', encoding='utf-8') as f:
                config = json.load(f)
        else:
            config = {"metadata": {"version": "2.0"}}

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        if new_mapping:
            config['class_mapping'] = {str(k): v for k, v in new_mapping.items()}
            config['metadata']['total_classes'] = len(new_mapping)

        if new_colors:
            config['class_colors'] = new_colors

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        with open(CONFIG_PATH, 'w', encoding='utf-8') as f:
            json.dump(config, f, ensure_ascii=False, indent=2)

        print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {CONFIG_PATH}")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
        return False


def print_config_info():
    """–í—ã–≤–µ—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    if not CLASS_MAPPING:
        if not load_config():
            print("‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            return

    print(f"\nüçΩÔ∏è –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ö–õ–ê–°–°–û–í:")
    print(f"–§–∞–π–ª: {CONFIG_PATH}")
    print(f"–í—Å–µ–≥–æ –∫–ª–∞—Å—Å–æ–≤: {len(CLASS_MAPPING)}")
    print("=" * 50)

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    if CLASS_CATEGORIES:
        for category, classes in CLASS_CATEGORIES.items():
            if classes:
                print(f"\nüìÇ {category.title()} ({len(classes)}):")
                for class_name in classes:
                    # –ù–∞—Ö–æ–¥–∏–º ID –∫–ª–∞—Å—Å–∞
                    class_id = None
                    for cid, cname in CLASS_MAPPING.items():
                        if cname == class_name:
                            class_id = cid
                            break

                    color = get_class_color(class_name)
                    if class_id is not None:
                        print(f"  {class_id:2d}: {class_name} ({color})")
    else:
        # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∫–ª–∞—Å—Å—ã
        print("\nüìã –í—Å–µ –∫–ª–∞—Å—Å—ã:")
        for class_id, class_name in sorted(CLASS_MAPPING.items()):
            color = get_class_color(class_name)
            print(f"  {class_id:2d}: {class_name} ({color})")


def print_food_mapping_info():
    """–í—ã–≤–µ—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞–ø–ø–∏–Ω–≥–µ –±–ª—é–¥ (–∞–ª–∏–∞—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
    print_config_info()


def validate_food_mapping():
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –º–∞–ø–ø–∏–Ω–≥–∞ –±–ª—é–¥

    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    """
    if not CLASS_MAPPING:
        if not load_config():
            return {
                'valid': False,
                'errors': ['–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞'],
                'warnings': [],
                'stats': {'total_classes': 0, 'food_classes': 0, 'tableware_classes': 0, 'service_classes': 0}
            }

    results = {
        'valid': True,
        'errors': [],
        'warnings': [],
        'stats': {
            'total_classes': len(CLASS_MAPPING),
            'food_classes': 0,
            'tableware_classes': 0,
            'service_classes': 0
        }
    }

    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–ø–∞–º
    for class_name in CLASS_MAPPING.values():
        if is_food_class(class_name):
            results['stats']['food_classes'] += 1
        elif is_tableware_class(class_name):
            results['stats']['tableware_classes'] += 1
        elif class_name in ['background', 'negative']:
            results['stats']['service_classes'] += 1

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–ª—É–∂–µ–±–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤
    has_background = any(name in ['background', '—Ñ–æ–Ω'] for name in CLASS_MAPPING.values())
    has_negative = any(name in ['negative', '–Ω–µ–≥–∞—Ç–∏–≤'] for name in CLASS_MAPPING.values())

    if not has_background:
        results['warnings'].append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª–∞—Å—Å 'background'")

    if not has_negative:
        results['warnings'].append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª–∞—Å—Å 'negative'")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–≤–µ—Ç–∞
    missing_colors = []
    for class_name in CLASS_MAPPING.values():
        if class_name not in CLASS_COLORS:
            missing_colors.append(class_name)

    if missing_colors:
        results['warnings'].append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ü–≤–µ—Ç–∞ –¥–ª—è –∫–ª–∞—Å—Å–æ–≤: {missing_colors}")

    return results


def load_classes_from_yaml(yaml_path):
    """
    –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–ª–∞—Å—Å—ã –∏–∑ YAML —Ñ–∞–π–ª–∞ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)

    Args:
        yaml_path (str): –ü—É—Ç—å –∫ YAML —Ñ–∞–π–ª—É

    Returns:
        bool: True –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ —É—Å–ø–µ—à–Ω–∞
    """
    try:
        import yaml
        from pathlib import Path

        with open(yaml_path, 'r', encoding='utf-8') as f:
            data = yaml.safe_load(f)

        if 'names' in data:
            names = data['names']
            new_mapping = {}

            if isinstance(names, list):
                for i, name in enumerate(names):
                    new_mapping[i] = name
            elif isinstance(names, dict):
                new_mapping = {int(k) if isinstance(k, str) and k.isdigit() else k: v
                               for k, v in names.items()}

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON
            if save_config(new_mapping=new_mapping):
                # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                reload_config()
                print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(new_mapping)} –∫–ª–∞—Å—Å–æ–≤ –∏–∑ {Path(yaml_path).name}")
                return True

        print(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∫–ª–∞—Å—Å—ã –≤ YAML —Ñ–∞–π–ª–µ: {yaml_path}")
        return False

    except ImportError:
        print("‚ùå –î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ YAML —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install PyYAML")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ YAML: {e}")
        return False


def check_fonts():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —à—Ä–∏—Ñ—Ç–æ–≤ (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
    print("üî§ –ü—Ä–æ–≤–µ—Ä–∫–∞ —à—Ä–∏—Ñ—Ç–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã...")

    font_paths = [
        "/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf",
        "/usr/share/fonts/truetype/liberation/LiberationSans-Regular.ttf",
    ]

    available_fonts = []
    for font_path in font_paths:
        if os.path.exists(font_path):
            available_fonts.append(font_path)

    if available_fonts:
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã —à—Ä–∏—Ñ—Ç—ã: {len(available_fonts)}")
    else:
        print("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

    return available_fonts


# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
if not load_config():
    print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–ª–∞—Å—Å–æ–≤ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
    print("üìù –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª classes_config.json —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∫–ª–∞—Å—Å–æ–≤")
    print("üìÅ –ü—Ä–∏–º–µ—Ä —Ñ–∞–π–ª–∞ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞")

if __name__ == "__main__":
    print("üîß –ú–∞–ø–ø–∏–Ω–≥ –∫–ª–∞—Å—Å–æ–≤ YOLO v2.0 - JSON –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
    print("=" * 60)

    # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    print_config_info()

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    food_count = sum(1 for name in CLASS_MAPPING.values() if is_food_class(name))
    tableware_count = sum(1 for name in CLASS_MAPPING.values() if is_tableware_class(name))

    print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"üçΩÔ∏è –ï–¥–∞: {food_count}")
    print(f"üç¥ –ü–æ—Å—É–¥–∞: {tableware_count}")
    print(f"üì¶ –î—Ä—É–≥–æ–µ: {len(CLASS_MAPPING) - food_count - tableware_count}")
    print(f"üé® –¶–≤–µ—Ç–æ–≤: {len(CLASS_COLORS)}")
    print(f"üîó –°–∏–Ω–æ–Ω–∏–º–æ–≤: {len(SYNONYMS)}")

    print(f"\nüíæ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª: {CONFIG_PATH}")
    print(f"‚úÖ –ì–æ—Ç–æ–≤–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")