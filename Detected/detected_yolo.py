#!/usr/bin/env python3
"""
YOLO Video Detector v2.0 - –ï–¥–∏–Ω—ã–π —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞
–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è main_app.py –∏ detected_yolo.py –¥–ª—è PyCharm
–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –¥–µ—Ç–µ–∫—Ü–∏—è –±–ª—é–¥, –Ω–∞–ø–∏—Ç–∫–æ–≤ –∏ –ø–æ—Å—É–¥—ã —Å –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
"""

import sys
import os
from pathlib import Path
import cv2
import numpy as np
from PyQt5.QtWidgets import (QApplication, QMainWindow, QFileDialog,
                             QMessageBox, QDialog, QVBoxLayout, QTextEdit,
                             QPushButton, QHBoxLayout, QLabel)
from PyQt5.QtCore import Qt, QTimer, pyqtSlot
from PyQt5.QtGui import QPixmap, QImage, QFont

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å Python
current_dir = Path(__file__).parent
sys.path.insert(0, str(current_dir))


def show_help():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"""
    help_text = """
üéØ YOLO Video Detector v2.0 - –ï–¥–∏–Ω—ã–π –∑–∞–ø—É—Å–∫–∞–µ–º—ã–π —Ñ–∞–π–ª

üì¶ –°–¢–†–£–ö–¢–£–†–ê –ü–†–û–ï–ö–¢–ê:
‚îú‚îÄ‚îÄ detected_yolo.py        # üöÄ –ì–õ–ê–í–ù–´–ô –§–ê–ô–õ (—ç—Ç–æ—Ç —Ñ–∞–π–ª)
‚îú‚îÄ‚îÄ video_processor.py      # –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ
‚îú‚îÄ‚îÄ designer.py             # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å PyQt5
‚îú‚îÄ‚îÄ class_mapping.py        # –ú–∞–ø–ø–∏–Ω–≥ –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏—Ö –∫–ª–∞—Å—Å–æ–≤
‚îî‚îÄ‚îÄ classes_config.json     # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–ª–∞—Å—Å–æ–≤

üöÄ –ó–ê–ü–£–°–ö –í PyCharm:
   1. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–æ–µ–∫—Ç –≤ PyCharm
   2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ detected_yolo.py (–ø—Ä–∞–≤—ã–π –∫–ª–∏–∫ -> Run)
   3. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É: python detected_yolo.py

‚ö†Ô∏è –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
   üìÅ classes_config.json - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–ª–∞—Å—Å–æ–≤
   üìÅ video_processor.py - –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ  
   üìÅ designer.py - –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å PyQt5
   üìÅ class_mapping.py - —Å–æ–∑–¥–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç

üéØ –ü–û–î–î–ï–†–ñ–ò–í–ê–ï–ú–´–ï –§–û–†–ú–ê–¢–´:
   –í–∏–¥–µ–æ: mp4, avi, mov, mkv, wmv, flv, webm, m4v, 3gp, mpg, mpeg, ts, mts
   –ú–æ–¥–µ–ª–∏: YOLO (.pt —Ñ–∞–π–ª—ã)

üá∑üá∫ –û–°–û–ë–ï–ù–ù–û–°–¢–ò:
   ‚úÖ –ö–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–ª–∞—Å—Å–æ–≤ –¥–ª—è –±–ª—é–¥ –∏ –µ–¥—ã
   ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–≤–æ—Ä–æ—Ç MOV —Ñ–∞–π–ª–æ–≤ –Ω–∞ 90¬∞
   ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–µ—Ç–µ–∫—Ü–∏–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
   ‚úÖ –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–µ—Ç–µ–∫—Ü–∏–∏ 640x640
   ‚úÖ –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞ –ø–æ —Ç–∏–ø–∞–º –µ–¥—ã
   ‚úÖ –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–µ—Ç–µ–∫—Ü–∏–π
   ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ JSON –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–ª–∞—Å—Å–æ–≤

üí° –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:
   1. –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å YOLO –∏ –≤–∏–¥–µ–æ
   2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
   3. –ù–∞—á–Ω–∏—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É
   4. –ù–∞–±–ª—é–¥–∞–π—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏

üîß –£–°–¢–ê–ù–û–í–ö–ê –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô:
   pip install ultralytics opencv-python PyQt5 Pillow numpy
"""
    print(help_text)


def check_classes_config():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ classes_config.json"""
    config_path = current_dir / 'classes_config.json'
    if not config_path.exists():
        print("‚ö†Ô∏è –§–∞–π–ª classes_config.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("üí° –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª classes_config.json —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –∫–ª–∞—Å—Å–æ–≤")
        print("üìÅ –ü—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞")
        return False

    try:
        import json
        with open(config_path, 'r', encoding='utf-8') as f:
            config = json.load(f)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å–µ–∫—Ü–∏–∏
        required_sections = ['class_mapping', 'class_colors', 'categories']
        missing_sections = []

        for section in required_sections:
            if section not in config:
                missing_sections.append(section)

        if missing_sections:
            print(f"‚ö†Ô∏è –í classes_config.json –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–µ–∫—Ü–∏–∏: {missing_sections}")
            return False

        print(f"‚úÖ classes_config.json –∑–∞–≥—Ä—É–∂–µ–Ω ({len(config.get('class_mapping', {}))} –∫–ª–∞—Å—Å–æ–≤)")
        return True

    except json.JSONDecodeError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ JSON —Ñ–∞–π–ª–µ classes_config.json: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è classes_config.json: {e}")
        return False


def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    dependencies = {
        'PyQt5': 'PyQt5',
        'ultralytics': 'ultralytics',
        'cv2': 'opencv-python',
        'numpy': 'numpy',
        'PIL': 'Pillow'
    }

    missing = []

    for module, package in dependencies.items():
        try:
            __import__(module)
            print(f"‚úÖ {module}")
        except ImportError:
            missing.append(package)
            print(f"‚ùå {module} (—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install {package})")

    if missing:
        print(f"\nüí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–∞–∫–µ—Ç—ã:")
        print(f"pip install {' '.join(missing)}")
        return False

    return True


class ClassesInfoDialog(QDialog):
    """–î–∏–∞–ª–æ–≥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∞—Å—Å–∞—Ö"""

    def __init__(self, class_info, parent=None):
        super().__init__(parent)
        self.setWindowTitle("üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∞—Å—Å–∞—Ö –º–æ–¥–µ–ª–∏")
        self.setMinimumSize(600, 500)

        layout = QVBoxLayout()

        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        text_edit = QTextEdit()
        text_edit.setFont(QFont("Consolas", 10))
        text_edit.setReadOnly(True)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        info_text = self.format_class_info(class_info)
        text_edit.setPlainText(info_text)

        layout.addWidget(text_edit)

        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        button_layout = QHBoxLayout()
        close_btn = QPushButton("–ó–∞–∫—Ä—ã—Ç—å")
        close_btn.clicked.connect(self.accept)
        button_layout.addStretch()
        button_layout.addWidget(close_btn)

        layout.addLayout(button_layout)
        self.setLayout(layout)

    def format_class_info(self, class_info):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∞—Å—Å–∞—Ö"""
        text = "üéØ –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ö–õ–ê–°–°–ê–• YOLO –ú–û–î–ï–õ–ò\n"
        text += "=" * 60 + "\n\n"

        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        text += f"üìä –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n"
        text += f"   –í—Å–µ–≥–æ –∫–ª–∞—Å—Å–æ–≤: {class_info.get('total_classes', 0)}\n"
        text += f"   –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–µ—Ç–µ–∫—Ü–∏–∏: {class_info.get('detection_resolution', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        text += f"   –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã: {'‚úÖ –î–∞' if class_info.get('cyrillic_available') else '‚ùå –ù–µ—Ç'}\n"
        text += f"   PIL –¥–æ—Å—Ç—É–ø–µ–Ω: {'‚úÖ –î–∞' if class_info.get('pil_available') else '‚ùå –ù–µ—Ç'}\n\n"

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        stats = class_info.get('statistics', {})
        if stats:
            text += f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n"
            text += f"   üçΩÔ∏è –ë–ª—é–¥–∞ –∏ –µ–¥–∞: {stats.get('food_classes', 0)}\n"
            text += f"   üç¥ –ü–æ—Å—É–¥–∞ –∏ –ø—Ä–∏–±–æ—Ä—ã: {stats.get('tableware_classes', 0)}\n"
            text += f"   üì¶ –ü—Ä–æ—á–∏–µ –æ–±—ä–µ–∫—Ç—ã: {stats.get('other_classes', 0)}\n\n"

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏
        model_info = class_info.get('model_info', {})
        if model_info:
            text += f"ü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏:\n"
            text += f"   –ü—É—Ç—å: {model_info.get('path', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            model_names = model_info.get('names', {})
            if model_names:
                text += f"   –ö–ª–∞—Å—Å–æ–≤ –≤ –º–æ–¥–µ–ª–∏: {len(model_names)}\n\n"

        # –ú–∞–ø–ø–∏–Ω–≥ –∫–ª–∞—Å—Å–æ–≤
        mapping = class_info.get('mapping', {})
        if mapping:
            text += f"üî§ –ú–∞–ø–ø–∏–Ω–≥ –∫–ª–∞—Å—Å–æ–≤:\n"
            text += "-" * 40 + "\n"
            for class_id, class_name in sorted(mapping.items()):
                text += f"   {class_id:2d}: {class_name}\n"

        return text


class AboutDialog(QDialog):
    """–î–∏–∞–ª–æ–≥ –û –ø—Ä–æ–≥—Ä–∞–º–º–µ"""

    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("–û –ø—Ä–æ–≥—Ä–∞–º–º–µ")
        self.setFixedSize(500, 400)

        layout = QVBoxLayout()

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("<h2>üéØ YOLO Video Detector v2.0</h2>")
        title.setAlignment(Qt.AlignCenter)
        layout.addWidget(title)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ
        info_text = """
<p><b>–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–∏–¥–µ–æ —Å –µ–¥–æ–π –∏ –ø–æ—Å—É–¥–æ–π</b></p>

<p><b>üåü –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:</b></p>
<ul>
<li>üá∑üá∫ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –∫–ª–∞—Å—Å–æ–≤</li>
<li>üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–≤–æ—Ä–æ—Ç MOV —Ñ–∞–π–ª–æ–≤ –Ω–∞ 90¬∞</li>
<li>üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–µ—Ç–µ–∫—Ü–∏–π</li>
<li>üéØ –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–µ—Ç–µ–∫—Ü–∏–∏ 640x640</li>
<li>üçΩÔ∏è –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞ –ø–æ —Ç–∏–ø–∞–º –µ–¥—ã</li>
<li>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏</li>
<li>üìÅ JSON –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–ª–∞—Å—Å–æ–≤</li>
</ul>

<p><b>üîß –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:</b></p>
<ul>
<li>Python 3.7+</li>
<li>PyQt5 (–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å)</li>
<li>Ultralytics YOLO (–¥–µ—Ç–µ–∫—Ü–∏—è)</li>
<li>OpenCV (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ)</li>
<li>PIL/Pillow (–∫–∏—Ä–∏–ª–ª–∏—Ü–∞)</li>
</ul>

<p><b>üìÅ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:</b></p>
<ul>
<li>–í–∏–¥–µ–æ: mp4, avi, mov, mkv, wmv –∏ –¥—Ä.</li>
<li>–ú–æ–¥–µ–ª–∏: YOLO .pt —Ñ–∞–π–ª—ã</li>
</ul>
        """

        info_label = QLabel(info_text)
        info_label.setWordWrap(True)
        layout.addWidget(info_label)

        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        close_btn = QPushButton("–ó–∞–∫—Ä—ã—Ç—å")
        close_btn.clicked.connect(self.accept)
        layout.addWidget(close_btn)

        self.setLayout(layout)


class YOLOVideoDetector(QMainWindow):
    """–û—Å–Ω–æ–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""

    def __init__(self):
        super().__init__()

        # –ò–º–ø–æ—Ä—Ç UI –∏ –ª–æ–≥–∏–∫–∏
        try:
            from designer import Ui_MainWindow
            from video_processor import VideoProcessor
        except ImportError as e:
            QMessageBox.critical(None, "–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞",
                                 f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª–∏:\n{e}\n\n"
                                 "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª—ã designer.py –∏ video_processor.py "
                                 "–Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ —á—Ç–æ –∏ detected_yolo.py")
            sys.exit(1)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤
        self.setup_application_style()

        # –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –≤–∏–¥–µ–æ
        self.video_processor = VideoProcessor()

        # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
        self.model_path = ""
        self.video_path = ""
        self.output_path = ""

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        self.setup_connections()

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.update_ui_state()

        print("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ YOLO Video Detector –∑–∞–ø—É—â–µ–Ω–æ")

    def setup_application_style(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º–Ω—ã—Ö —Å—Ç–∏–ª–µ–π –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤–∫–ª—é—á–∞—è –¥–∏–∞–ª–æ–≥–∏"""

        # –°—Ç–∏–ª–∏ –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤—ã—Ö –æ–∫–æ–Ω
        dialog_style = """
        QMessageBox {
            background-color: #2c3e50;
            color: #ecf0f1;
            border: 2px solid #34495e;
            border-radius: 8px;
        }

        QMessageBox QLabel {
            color: #ecf0f1;
            font-size: 13px;
            font-weight: normal;
            padding: 15px;
            min-width: 300px;
        }

        QMessageBox QPushButton {
            background-color: #3498db;
            border: none;
            color: white;
            padding: 10px 20px;
            border-radius: 5px;
            font-weight: bold;
            min-width: 90px;
            margin: 5px;
        }

        QMessageBox QPushButton:hover {
            background-color: #2980b9;
        }

        QMessageBox QPushButton:pressed {
            background-color: #21618c;
        }

        QDialog {
            background-color: #2c3e50;
            color: #ecf0f1;
            border: 2px solid #34495e;
            border-radius: 8px;
        }

        QDialog QLabel {
            color: #ecf0f1;
            font-weight: normal;
        }

        QDialog QPushButton {
            background-color: #27ae60;
            border: none;
            color: white;
            padding: 8px 16px;
            border-radius: 4px;
            font-weight: bold;
            min-width: 80px;
        }

        QDialog QPushButton:hover {
            background-color: #229954;
        }

        QFileDialog {
            background-color: #2c3e50;
            color: #ecf0f1;
        }

        QFileDialog QLabel {
            color: #ecf0f1;
        }

        QFileDialog QLineEdit {
            background-color: #34495e;
            color: #ecf0f1;
            border: 1px solid #555;
            padding: 5px;
            border-radius: 3px;
        }

        QFileDialog QListView {
            background-color: #34495e;
            color: #ecf0f1;
            border: 1px solid #555;
            alternate-background-color: #3a4a5c;
        }

        QFileDialog QTreeView {
            background-color: #34495e;
            color: #ecf0f1;
            border: 1px solid #555;
            alternate-background-color: #3a4a5c;
        }

        QFileDialog QPushButton {
            background-color: #3498db;
            border: none;
            color: white;
            padding: 8px 16px;
            border-radius: 4px;
            font-weight: bold;
        }

        QFileDialog QPushButton:hover {
            background-color: #2980b9;
        }
        """

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –∫–æ –≤—Å–µ–º—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
        QApplication.instance().setStyleSheet(dialog_style)

    def create_styled_message_box(self, title, text, icon_type=QMessageBox.Information, buttons=QMessageBox.Ok):
        """–°–æ–∑–¥–∞—Ç—å —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π QMessageBox —Å —Ç–µ–º–Ω–æ–π —Ç–µ–º–æ–π"""

        msg = QMessageBox(self)
        msg.setWindowTitle(title)
        msg.setText(text)
        msg.setIcon(icon_type)
        msg.setStandardButtons(buttons)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç —Ä–∞–º–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        border_colors = {
            QMessageBox.Information: "#27ae60",  # –ó–µ–ª–µ–Ω—ã–π
            QMessageBox.Warning: "#f39c12",  # –û—Ä–∞–Ω–∂–µ–≤—ã–π
            QMessageBox.Critical: "#e74c3c",  # –ö—Ä–∞—Å–Ω—ã–π
            QMessageBox.Question: "#3498db"  # –°–∏–Ω–∏–π
        }

        button_colors = {
            QMessageBox.Information: "#27ae60",
            QMessageBox.Warning: "#f39c12",
            QMessageBox.Critical: "#e74c3c",
            QMessageBox.Question: "#3498db"
        }

        button_hover_colors = {
            QMessageBox.Information: "#229954",
            QMessageBox.Warning: "#e67e22",
            QMessageBox.Critical: "#c0392b",
            QMessageBox.Question: "#2980b9"
        }

        border_color = border_colors.get(icon_type, "#34495e")
        button_color = button_colors.get(icon_type, "#3498db")
        button_hover_color = button_hover_colors.get(icon_type, "#2980b9")

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏
        msg.setStyleSheet(f"""
            QMessageBox {{
                background-color: #2c3e50;
                color: #ecf0f1;
                border: 3px solid {border_color};
                border-radius: 10px;
                font-family: 'Segoe UI', Arial, sans-serif;
            }}

            QMessageBox QLabel {{
                color: #ecf0f1;
                font-size: 14px;
                font-weight: normal;
                padding: 20px;
                min-width: 350px;
                background-color: transparent;
                border: none;
            }}

            QMessageBox QPushButton {{
                background-color: {button_color};
                border: none;
                color: white;
                padding: 12px 25px;
                border-radius: 6px;
                font-weight: bold;
                font-size: 13px;
                min-width: 100px;
                margin: 5px;
            }}

            QMessageBox QPushButton:hover {{
                background-color: {button_hover_color};
                border: 1px solid {button_color};
            }}

            QMessageBox QPushButton:pressed {{
                background-color: #34495e;
                border: 2px solid {button_color};
            }}

            QMessageBox QIcon {{
                margin: 10px;
            }}
        """)

        return msg

    # –£–¥–æ–±–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
    def show_info(self, title, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        msg = self.create_styled_message_box(title, message, QMessageBox.Information)
        return msg.exec_()

    def show_warning(self, title, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ"""
        msg = self.create_styled_message_box(title, message, QMessageBox.Warning)
        return msg.exec_()

    def show_error(self, title, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É"""
        msg = self.create_styled_message_box(title, message, QMessageBox.Critical)
        return msg.exec_()

    def show_question(self, title, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤–æ–ø—Ä–æ—Å"""
        msg = self.create_styled_message_box(title, message, QMessageBox.Question,
                                             QMessageBox.Yes | QMessageBox.No)
        msg.setDefaultButton(QMessageBox.No)
        return msg.exec_()

    def setup_connections(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å–∏–≥–Ω–∞–ª–æ–≤ –∏ —Å–ª–æ—Ç–æ–≤"""

        # –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤
        self.ui.modelBtn.clicked.connect(self.select_model)
        self.ui.videoBtn.clicked.connect(self.select_video)
        self.ui.outputBtn.clicked.connect(self.select_output)

        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
        self.ui.startBtn.clicked.connect(self.start_processing)
        self.ui.pauseBtn.clicked.connect(self.pause_processing)
        self.ui.stopBtn.clicked.connect(self.stop_processing)

        # –°–ª–∞–π–¥–µ—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.ui.confSlider.valueChanged.connect(self.update_confidence)
        self.ui.iouSlider.valueChanged.connect(self.update_iou)
        self.ui.fontSlider.valueChanged.connect(self.update_font_scale)
        self.ui.thicknessSlider.valueChanged.connect(self.update_line_thickness)

        # –ß–µ–∫–±–æ–∫—Å –ø–æ–≤–æ—Ä–æ—Ç–∞
        self.ui.rotateMovCheckbox.toggled.connect(self.update_rotate_mov)

        # –°–∏–≥–Ω–∞–ª—ã –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –≤–∏–¥–µ–æ
        self.video_processor.frame_ready.connect(self.display_frame)
        self.video_processor.progress.connect(self.ui.progressBar.setValue)
        self.video_processor.status.connect(self.ui.statusLabel.setText)
        self.video_processor.finished.connect(self.processing_finished)
        self.video_processor.statistics_updated.connect(self.update_statistics)

        # –ö–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.ui.clearStatsBtn.clicked.connect(self.clear_statistics)
        self.ui.saveStatsBtn.clicked.connect(self.save_statistics)

        # –ú–µ–Ω—é
        self.ui.actionOpenModel.triggered.connect(self.select_model)
        self.ui.actionOpenVideo.triggered.connect(self.select_video)
        self.ui.actionLoadYaml.triggered.connect(self.load_yaml_classes)
        self.ui.actionExit.triggered.connect(self.close)
        self.ui.actionShowAllClasses.triggered.connect(self.show_classes_info)
        self.ui.actionClearStats.triggered.connect(self.clear_statistics)
        self.ui.actionSaveStats.triggered.connect(self.save_statistics)
        self.ui.actionRotateMov.triggered.connect(self.ui.rotateMovCheckbox.toggle)
        self.ui.actionAbout.triggered.connect(self.show_about)

        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —á–µ–∫–±–æ–∫—Å–∞ –∏ –º–µ–Ω—é
        self.ui.rotateMovCheckbox.toggled.connect(self.ui.actionRotateMov.setChecked)
        self.ui.actionRotateMov.toggled.connect(self.ui.rotateMovCheckbox.setChecked)

    def select_model(self):
        """–í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ YOLO"""
        current_dir = os.path.dirname(os.path.abspath(__file__))

        file_path, _ = QFileDialog.getOpenFileName(
            self,
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å YOLO",
            current_dir,
            "YOLO –º–æ–¥–µ–ª–∏ (*.pt);;–í—Å–µ —Ñ–∞–π–ª—ã (*)",
            options=QFileDialog.DontUseNativeDialog  # –ö–ª—é—á–µ–≤–∞—è –æ–ø—Ü–∏—è!
        )

        if file_path:
            self.model_path = file_path
            model_name = Path(file_path).name
            self.ui.modelLabel.setText(f"–ú–æ–¥–µ–ª—å: {model_name}")

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏
            self.video_processor.load_model_classes(file_path)
            self.update_model_info()
            self.update_ui_state()

            print(f"‚úÖ –ú–æ–¥–µ–ª—å –≤—ã–±—Ä–∞–Ω–∞: {model_name}")

    def select_video(self):
        """–í—ã–±–æ—Ä –≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞"""
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∞–∫ –Ω–∏–∂–Ω–µ–≥–æ, —Ç–∞–∫ –∏ –≤–µ—Ä—Ö–Ω–µ–≥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞
        video_filter = (
            "–í–∏–¥–µ–æ —Ñ–∞–π–ª—ã ("
            "*.mp4 *.MP4 "
            "*.avi *.AVI "
            "*.mov *.MOV "
            "*.mkv *.MKV "
            "*.wmv *.WMV "
            "*.flv *.FLV "
            "*.webm *.WEBM "
            "*.m4v *.M4V "
            "*.3gp *.3GP "
            "*.mpg *.MPG "
            "*.mpeg *.MPEG "
            "*.ts *.TS "
            "*.mts *.MTS"
            ");;"
            "MOV —Ñ–∞–π–ª—ã (*.mov *.MOV);;"
            "MP4 —Ñ–∞–π–ª—ã (*.mp4 *.MP4);;"
            "AVI —Ñ–∞–π–ª—ã (*.avi *.AVI);;"
            "–í—Å–µ —Ñ–∞–π–ª—ã (*)"
        )
        current_dir = os.path.dirname(os.path.abspath(__file__))
        file_path, _ = QFileDialog.getOpenFileName(
            self, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª", "", video_filter,
            options=QFileDialog.DontUseNativeDialog
        )

        if file_path:
            self.video_path = file_path
            video_name = Path(file_path).name
            self.ui.videoLabel.setText(f"–í–∏–¥–µ–æ: {video_name}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–µ–æ —Ñ–∞–π–ª
            video_info = self.video_processor.verify_video_file(file_path)
            if video_info['is_valid']:
                info_text = (f"–í–∏–¥–µ–æ: {video_info['width']}x{video_info['height']}, "
                             f"{video_info['frame_count']} –∫–∞–¥—Ä–æ–≤, "
                             f"{video_info['fps']:.1f} FPS, "
                             f"{video_info['duration']:.1f}s")
                self.ui.statusLabel.setText(info_text)

                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è MOV —Ñ–∞–π–ª–æ–≤
                if Path(file_path).suffix.upper() == '.MOV':
                    self.ui.statusLabel.setText(f"{info_text} - MOV —Ñ–∞–π–ª –æ–±–Ω–∞—Ä—É–∂–µ–Ω")

            else:
                self.show_warning("–û—à–∏–±–∫–∞", f"–ü—Ä–æ–±–ª–µ–º–∞ —Å –≤–∏–¥–µ–æ: {video_info['error']}")
                return

            self.update_ui_state()
            print(f"‚úÖ –í–∏–¥–µ–æ –≤—ã–±—Ä–∞–Ω–æ: {video_name}")

            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ MOV —Ñ–∞–π–ª–æ–≤
            file_extension = Path(file_path).suffix
            print(f"üìÅ –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: '{file_extension}'")
            if file_extension.upper() == '.MOV':
                print(f"üîÑ MOV —Ñ–∞–π–ª –æ–±–Ω–∞—Ä—É–∂–µ–Ω, –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω –ø–æ–≤–æ—Ä–æ—Ç: {self.ui.rotateMovCheckbox.isChecked()}")

    def select_output(self):
        """–í—ã–±–æ—Ä –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        current_dir = os.path.dirname(os.path.abspath(__file__))
        file_path, _ = QFileDialog.getSaveFileName(
            self, "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ", "",current_dir,
            "MP4 –≤–∏–¥–µ–æ (*.mp4);;AVI –≤–∏–¥–µ–æ (*.avi);;MOV –≤–∏–¥–µ–æ (*.mov);;–í—Å–µ —Ñ–∞–π–ª—ã (*)",
            options=QFileDialog.DontUseNativeDialog
        )

        if file_path:
            self.output_path = file_path
            output_name = Path(file_path).name
            self.ui.outputLabel.setText(f"–í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {output_name}")
            print(f"‚úÖ –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {output_name}")

    def update_confidence(self, value):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è confidence"""
        conf_value = value / 100.0
        self.ui.confLabel.setText(f"{conf_value:.2f}")
        self.video_processor.set_detection_params(confidence=conf_value)

    def update_iou(self, value):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è IoU"""
        iou_value = value / 100.0
        self.ui.iouLabel.setText(f"{iou_value:.2f}")
        self.video_processor.set_detection_params(iou=iou_value)

    def update_font_scale(self, value):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —à—Ä–∏—Ñ—Ç–∞"""
        font_scale = value / 10.0
        self.ui.fontLabel.setText(f"{font_scale:.1f}")
        self.video_processor.set_display_params(font_scale=font_scale)

    def update_line_thickness(self, value):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ª—â–∏–Ω—ã –ª–∏–Ω–∏–π"""
        self.ui.thicknessLabel.setText(str(value))
        self.video_processor.set_display_params(line_thickness=value)

    def update_rotate_mov(self, checked):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–≤–æ—Ä–æ—Ç–∞ MOV"""
        self.video_processor.set_display_params(rotate_mov=checked)

    def start_processing(self):
        """–ù–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∏–¥–µ–æ"""
        if not self.model_path or not self.video_path:
            self.show_warning("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∏ –≤–∏–¥–µ–æ —Ñ–∞–π–ª!")
            return

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
        self.video_processor.set_files(self.model_path, self.video_path, self.output_path)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        self.video_processor.start()

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.ui.startBtn.setEnabled(False)
        self.ui.pauseBtn.setEnabled(True)
        self.ui.stopBtn.setEnabled(True)

        print("üöÄ –ù–∞—á–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ")

    def pause_processing(self):
        """–ü–∞—É–∑–∞/–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É"""
        self.video_processor.pause_resume()

        if self.video_processor.paused:
            self.ui.pauseBtn.setText("‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")
            self.ui.statusLabel.setText("‚è∏Ô∏è –ü–∞—É–∑–∞")
        else:
            self.ui.pauseBtn.setText("‚è∏Ô∏è –ü–∞—É–∑–∞")
            self.ui.statusLabel.setText("‚ñ∂Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∞")

    def stop_processing(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É"""
        self.video_processor.stop()
        self.ui.statusLabel.setText("‚èπÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

    def processing_finished(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"""
        self.ui.startBtn.setEnabled(True)
        self.ui.pauseBtn.setEnabled(False)
        self.ui.pauseBtn.setText("‚è∏Ô∏è –ü–∞—É–∑–∞")
        self.ui.stopBtn.setEnabled(False)
        self.ui.progressBar.setValue(100)

        self.ui.statusLabel.setText(message)

        if "—É—Å–ø–µ—à–Ω–æ" in message:
            self.show_info("–ì–æ—Ç–æ–≤–æ", message)
        else:
            self.show_error("–û—à–∏–±–∫–∞", message)

        print(f"‚úÖ {message}")

    def display_frame(self, frame):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–¥—Ä–∞ –≤–∏–¥–µ–æ"""
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º BGR –≤ RGB
            rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

            # –°–æ–∑–¥–∞–µ–º QImage
            h, w, ch = rgb_frame.shape
            bytes_per_line = ch * w
            qt_image = QImage(rgb_frame.data, w, h, bytes_per_line, QImage.Format_RGB888)

            # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            display_size = self.ui.videoDisplay.size()
            scaled_pixmap = QPixmap.fromImage(qt_image).scaled(display_size, Qt.KeepAspectRatio,
                                                               Qt.SmoothTransformation)

            self.ui.videoDisplay.setPixmap(scaled_pixmap)

        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞–¥—Ä–∞: {e}")

    @pyqtSlot(str)
    def update_statistics(self, stats_text):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–µ—Ç–µ–∫—Ü–∏–π"""
        self.ui.statisticsText.setPlainText(stats_text)

    def clear_statistics(self):
        """–û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        self.ui.statisticsText.setPlainText("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–ï–¢–ï–ö–¶–ò–ô\n\nüîÑ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–∏—â–µ–Ω–∞")
        print("üóëÔ∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–∏—â–µ–Ω–∞")

    def save_statistics(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ñ–∞–π–ª"""
        current_dir = os.path.dirname(os.path.abspath(__file__))
        file_path, _ = QFileDialog.getSaveFileName(
            self, "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", "statistics.txt",current_dir,
            "–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã (*.txt);;–í—Å–µ —Ñ–∞–π–ª—ã (*)",
            options=QFileDialog.DontUseNativeDialog
        )

        if file_path:
            try:
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write(self.ui.statisticsText.toPlainText())

                self.show_info("–ì–æ—Ç–æ–≤–æ", f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {Path(file_path).name}")
                print(f"üíæ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {file_path}")

            except Exception as e:
                self.show_warning("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª: {e}")

    def load_yaml_classes(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–ª–∞—Å—Å—ã –∏–∑ YAML —Ñ–∞–π–ª–∞"""
        # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ç–µ–∫—É—â–µ–º—É –∫–∞—Ç–∞–ª–æ–≥—É
        current_dir = os.getcwd()

        file_path, _ = QFileDialog.getOpenFileName(
            self, "–í—ã–±–µ—Ä–∏—Ç–µ YAML —Ñ–∞–π–ª —Å –∫–ª–∞—Å—Å–∞–º–∏", current_dir,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π –∫–∞—Ç–∞–ª–æ–≥
            "YAML —Ñ–∞–π–ª—ã (*.yaml *.yml);;–í—Å–µ —Ñ–∞–π–ª—ã (*)"
        )

        if file_path:
            try:
                from class_mapping import load_classes_from_yaml
                if load_classes_from_yaml(file_path):
                    self.show_info("–ì–æ—Ç–æ–≤–æ", "–ö–ª–∞—Å—Å—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ YAML")
                    self.update_model_info()
                else:
                    self.show_warning("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–ª–∞—Å—Å—ã –∏–∑ YAML")
            except Exception as e:
                self.show_warning("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ YAML: {e}")

    def show_classes_info(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∞—Å—Å–∞—Ö"""
        class_info = self.video_processor.get_class_mapping_info()
        dialog = ClassesInfoDialog(class_info, self)
        dialog.exec_()

    def show_about(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ –û –ø—Ä–æ–≥—Ä–∞–º–º–µ"""
        dialog = AboutDialog(self)
        dialog.exec_()

    def update_model_info(self):
        """–û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏"""
        if self.model_path:
            class_info = self.video_processor.get_class_mapping_info()

            info_text = f"üìÅ –ú–æ–¥–µ–ª—å: {Path(self.model_path).name}\n"
            info_text += f"üìä –ö–ª–∞—Å—Å–æ–≤: {class_info.get('total_classes', 0)}\n"
            info_text += f"üéØ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {class_info.get('detection_resolution', '640x640')}\n"
            info_text += f"üá∑üá∫ –ö–∏—Ä–∏–ª–ª–∏—Ü–∞: {'‚úÖ' if class_info.get('cyrillic_available') else '‚ùå'}\n"

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            stats = class_info.get('statistics', {})
            if stats:
                info_text += f"\nüìà –ö–∞—Ç–µ–≥–æ—Ä–∏–∏:\n"
                info_text += f"üçΩÔ∏è –ï–¥–∞: {stats.get('food_classes', 0)}\n"
                info_text += f"üç¥ –ü–æ—Å—É–¥–∞: {stats.get('tableware_classes', 0)}\n"
                info_text += f"üì¶ –î—Ä—É–≥–æ–µ: {stats.get('other_classes', 0)}"

            self.ui.modelInfoText.setPlainText(info_text)
        else:
            self.ui.modelInfoText.setPlainText("–ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

    def update_ui_state(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        has_model = bool(self.model_path)
        has_video = bool(self.video_path)

        # –ö–Ω–æ–ø–∫–∞ —Å—Ç–∞—Ä—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –º–æ–¥–µ–ª–∏ –∏ –≤–∏–¥–µ–æ
        self.ui.startBtn.setEnabled(has_model and has_video and not self.video_processor.running)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏
        self.update_model_info()

    def closeEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        if self.video_processor.running:
            reply = self.show_question("–í—ã—Ö–æ–¥",
                                       "–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ?")

            if reply == QMessageBox.Yes:
                self.video_processor.stop()
                self.video_processor.wait(3000)  # –ñ–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã
                event.accept()
            else:
                event.ignore()
        else:
            event.accept()


def check_required_files():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    required_files = {
        'video_processor.py': '–õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ',
        'designer.py': '–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å PyQt5',
        'class_mapping.py': '–ú–∞–ø–ø–∏–Ω–≥ –∫–ª–∞—Å—Å–æ–≤',
        'classes_config.json': '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–ª–∞—Å—Å–æ–≤ (JSON)'
    }

    missing_files = []
    found_files = []

    for file_name, description in required_files.items():
        if not (current_dir / file_name).exists():
            missing_files.append((file_name, description))
        else:
            found_files.append((file_name, description))

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    if found_files:
        print("‚úÖ –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
        for file_name, description in found_files:
            print(f"   üìÅ {file_name} - {description}")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã
    if missing_files:
        print("\n‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã:")
        for file_name, description in missing_files:
            print(f"   üìÅ {file_name} - {description}")

    return [file_name for file_name, _ in missing_files]


def run_gui_application():
    """–ó–∞–ø—É—Å–∫ GUI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ GUI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")

    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        app = QApplication(sys.argv)
        app.setApplicationName("YOLO Video Detector")
        app.setApplicationVersion("2.0")

        # –°–æ–∑–¥–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
        window = YOLOVideoDetector()
        window.show()

        print("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ")

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π
        return app.exec_()

    except ImportError as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞:")
        print("   - video_processor.py")
        print("   - designer.py")
        print("   - class_mapping.py")
        print("   - classes_config.json")
        return 1

    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ GUI: {e}")
        import traceback
        traceback.print_exc()
        return 1


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ YOLO Video Detector v2.0 - –ï–¥–∏–Ω—ã–π –∑–∞–ø—É—Å–∫–∞–µ–º—ã–π —Ñ–∞–π–ª")
    print("üì¶ –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è PyCharm IDE")
    print("üçΩÔ∏è –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –¥–µ—Ç–µ–∫—Ü–∏—è –±–ª—é–¥, –Ω–∞–ø–∏—Ç–∫–æ–≤ –∏ –ø–æ—Å—É–¥—ã")
    print("üá∑üá∫ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –∫–ª–∞—Å—Å–æ–≤")
    print("=" * 75)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ classes_config.json
    if not check_classes_config():
        print("\nüí° –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º —Ñ–∞–π–ª classes_config.json")
        print("üìã –û–±—Ä–∞–∑–µ—Ü –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
        print("   - –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø—Ä–∏–ª–∞–≥–∞–µ–º—ã–π classes_config.json")
        print("   - –ò–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏")
        return 1

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
    missing_files = check_required_files()

    if missing_files:
        print(f"\n‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –æ–¥–Ω–æ–π –ø–∞–ø–∫–µ —Å detected_yolo.py")
        return 1

    print("\n‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏ –Ω–∞–π–¥–µ–Ω—ã")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:")
    if not check_dependencies():
        print("\nüí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
        return 1

    print("\n‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

    # –ó–∞–ø—É—Å–∫–∞–µ–º GUI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    return run_gui_application()


if __name__ == "__main__":
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if len(sys.argv) > 1:
        arg = sys.argv[1].lower()

        if arg in ['--help', '-h', 'help']:
            show_help()
            sys.exit(0)

        elif arg == '--version':
            print("YOLO Video Detector v2.0 - –ï–¥–∏–Ω—ã–π –∑–∞–ø—É—Å–∫–∞–µ–º—ã–π —Ñ–∞–π–ª")
            print("–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –¥–µ—Ç–µ–∫—Ü–∏—è –±–ª—é–¥, –Ω–∞–ø–∏—Ç–∫–æ–≤ –∏ –ø–æ—Å—É–¥—ã")
            print("–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –∫–ª–∞—Å—Å–æ–≤")
            print("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å PyCharm IDE")
            sys.exit(0)

        elif arg == '--check':
            print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã:")
            print("‚úÖ Python:", sys.version)
            print("\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤:")
            missing = check_required_files()
            if missing:
                print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {missing}")
            else:
                print("‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã")

            print("\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
            check_classes_config()

            print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:")
            check_dependencies()
            sys.exit(0)

        elif arg == '--config-info':
            print("üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ classes_config.json:")
            if check_classes_config():
                try:
                    from class_mapping import print_config_info

                    print_config_info()
                except ImportError:
                    print("‚ö†Ô∏è –ú–æ–¥—É–ª—å class_mapping –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            sys.exit(0)

        else:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç: {arg}")
            print("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏")
            sys.exit(1)

    # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    try:
        exit_code = main()
        sys.exit(exit_code)
    except KeyboardInterrupt:
        print("\nüëã –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(0)
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback

        traceback.print_exc()
        print("\nüîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞:")
        print("   üìÅ classes_config.json (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π)")
        print("   üìÅ video_processor.py")
        print("   üìÅ designer.py")
        print("2. –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
        print("3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --check –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")
        print("4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º")
        print("5. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --config-info –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        sys.exit(1)