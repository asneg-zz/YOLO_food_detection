#!/usr/bin/env python3
"""
YOLO Video Processor - –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –∫–ª–∞—Å—Å–æ–≤
–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–µ—Ç–µ–∫—Ü–∏–∏: 640x640
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–∑ JSON —Ñ–∞–π–ª–∞
+ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–µ—Ç–µ–∫—Ü–∏–π
"""

import os
import sys
import cv2
import time
import numpy as np
from pathlib import Path
from PyQt5.QtCore import QThread, pyqtSignal
from collections import defaultdict, Counter

try:
    from ultralytics import YOLO

    print("‚úÖ YOLO –∑–∞–≥—Ä—É–∂–µ–Ω")
except ImportError:
    print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install ultralytics")
    sys.exit(1)

try:
    from PIL import Image, ImageDraw, ImageFont

    PIL_AVAILABLE = True
    print("‚úÖ PIL –∑–∞–≥—Ä—É–∂–µ–Ω –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã")
except ImportError:
    PIL_AVAILABLE = False
    print("‚ö†Ô∏è PIL –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install Pillow")

# –ò–º–ø–æ—Ä—Ç –º–∞–ø–ø–∏–Ω–≥–∞ –∫–ª–∞—Å—Å–æ–≤ –∏–∑ JSON
try:
    from class_mapping import (
        CLASS_MAPPING, get_cyrillic_class_name, auto_detect_classes_from_model,
        get_class_by_synonym, is_food_class, is_tableware_class, get_class_color,
        get_coco_class_name, load_classes_from_yaml, check_fonts
    )

    CYRILLIC_MAPPING_AVAILABLE = True
    print("‚úÖ –ú–∞–ø–ø–∏–Ω–≥ –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏—Ö –∫–ª–∞—Å—Å–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ JSON")
except ImportError:
    CYRILLIC_MAPPING_AVAILABLE = False
    print("‚ö†Ô∏è –§–∞–π–ª class_mapping.py –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã")

    # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –º–∞–ø–ø–∏–Ω–≥
    CLASS_MAPPING = {
        0: "—Å–∞–ª–∞—Ç", 1: "—Å—É–ø", 2: "–º—è—Å–æ", 3: "–æ–≤–æ—â–∏", 4: "—Ö–ª–µ–±",
        5: "—Ç–∞—Ä–µ–ª–∫–∞", 6: "—á–∞—à–∫–∞", 7: "—Å—Ç–∞–∫–∞–Ω", 8: "background"
    }


    def get_cyrillic_class_name(class_id, fallback_name=None):
        return CLASS_MAPPING.get(class_id, fallback_name or f"–∫–ª–∞—Å—Å_{class_id}")


    def get_class_by_synonym(synonym):
        return None


    def is_food_class(class_name):
        return class_name in ["—Å–∞–ª–∞—Ç", "—Å—É–ø", "–º—è—Å–æ", "–æ–≤–æ—â–∏", "—Ö–ª–µ–±"]


    def is_tableware_class(class_name):
        return class_name in ["—Ç–∞—Ä–µ–ª–∫–∞", "—á–∞—à–∫–∞", "—Å—Ç–∞–∫–∞–Ω"]


    def get_class_color(class_name):
        return "#808080"


    def get_coco_class_name(class_id):
        return None


def load_classes_from_yaml(yaml_path):
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–ª–∞—Å—Å—ã –∏–∑ YAML —Ñ–∞–π–ª–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞"""
    try:
        import yaml
        with open(yaml_path, 'r', encoding='utf-8') as f:
            data = yaml.safe_load(f)

        if 'names' in data:
            names = data['names']
            if isinstance(names, list):
                for i, name in enumerate(names):
                    CLASS_MAPPING[i] = name
            elif isinstance(names, dict):
                CLASS_MAPPING.update(names)

            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(CLASS_MAPPING)} –∫–ª–∞—Å—Å–æ–≤ –∏–∑ {Path(yaml_path).name}")
            for k, v in list(CLASS_MAPPING.items())[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                print(f"   {k}: {v}")
            if len(CLASS_MAPPING) > 5:
                print(f"   ... –∏ –µ—â–µ {len(CLASS_MAPPING) - 5}")

    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–ª–∞—Å—Å—ã –∏–∑ YAML: {e}")


def check_fonts():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —à—Ä–∏—Ñ—Ç–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã"""
    font_paths = [
        # Linux
        "/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf",
        "/usr/share/fonts/truetype/liberation/LiberationSans-Regular.ttf",
    ]

    available_fonts = []
    for font_path in font_paths:
        if os.path.exists(font_path):
            available_fonts.append(font_path)

    if available_fonts:
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã —à—Ä–∏—Ñ—Ç—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã: {available_fonts[:2]}")
    else:
        print("‚ö†Ô∏è –®—Ä–∏—Ñ—Ç—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

    return available_fonts


def rotate_frame_90_clockwise(frame):
    """–ü–æ–≤–æ—Ä–æ—Ç –∫–∞–¥—Ä–∞ –Ω–∞ 90 –≥—Ä–∞–¥—É—Å–æ–≤ –ø–æ —á–∞—Å–æ–≤–æ–π —Å—Ç—Ä–µ–ª–∫–µ"""
    return cv2.rotate(frame, cv2.ROTATE_90_CLOCKWISE)


class DetectionStatistics:
    """–ö–ª–∞—Å—Å –¥–ª—è –≤–µ–¥–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–µ—Ç–µ–∫—Ü–∏–π"""

    def __init__(self):
        self.reset()

    def reset(self):
        """–°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        self.total_detections = 0
        self.food_count = 0
        self.tableware_count = 0
        self.other_count = 0
        self.class_counts = Counter()
        self.confidence_sum = 0
        self.high_confidence_count = 0  # conf >= 0.8
        self.medium_confidence_count = 0  # 0.5 <= conf < 0.8
        self.low_confidence_count = 0  # conf < 0.5

    def update(self, class_name, confidence):
        """
        –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –æ–¥–Ω–æ–π –¥–µ—Ç–µ–∫—Ü–∏–∏

        Args:
            class_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞
            confidence (float): –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–µ—Ç–µ–∫—Ü–∏–∏
        """
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω –∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –æ–±—Ä–∞–∑—Ü—ã
        background_variants = ['background', 'Background', 'BACKGROUND', 'bg', 'BG',
                               '—Ñ–æ–Ω', '–§–æ–Ω', '–§–û–ù', '–∑–∞–¥–Ω–∏–π_–ø–ª–∞–Ω', '–∑–∞–¥–Ω–∏–π –ø–ª–∞–Ω', 'negative']
        if str(class_name).lower() in [variant.lower() for variant in background_variants]:
            return

        self.total_detections += 1
        self.class_counts[class_name] += 1
        self.confidence_sum += confidence

        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ —Ç–∏–ø–∞–º
        if is_food_class(class_name):
            self.food_count += 1
        elif is_tableware_class(class_name):
            self.tableware_count += 1
        else:
            self.other_count += 1

        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        if confidence >= 0.8:
            self.high_confidence_count += 1
        elif confidence >= 0.5:
            self.medium_confidence_count += 1
        else:
            self.low_confidence_count += 1

    def get_statistics_text(self):
        """
        –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

        Returns:
            str: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        """
        if self.total_detections == 0:
            return "üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–ï–¢–ï–ö–¶–ò–ô\n\n–ù–µ—Ç –¥–µ—Ç–µ–∫—Ü–∏–π –Ω–∞ —Ç–µ–∫—É—â–µ–º –∫–∞–¥—Ä–µ"

        avg_confidence = self.confidence_sum / self.total_detections if self.total_detections > 0 else 0

        stats_text = f"""üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–ï–¢–ï–ö–¶–ò–ô –ù–ê –°–¢–û–õ–ï

üìà –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
  –í—Å–µ–≥–æ –æ–±—ä–µ–∫—Ç–æ–≤: {self.total_detections}
  –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {avg_confidence:.2f}

üçΩÔ∏è –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:
  ü•ó –ë–ª—é–¥–∞ –∏ –µ–¥–∞: {self.food_count} ({self.food_count / self.total_detections * 100:.1f}%)
  üç¥ –ü–æ—Å—É–¥–∞ –∏ –ø—Ä–∏–±–æ—Ä—ã: {self.tableware_count} ({self.tableware_count / self.total_detections * 100:.1f}%)
  üì¶ –ü—Ä–æ—á–∏–µ –æ–±—ä–µ–∫—Ç—ã: {self.other_count} ({self.other_count / self.total_detections * 100:.1f}%)

üéØ –ü–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏:
  üü¢ –í—ã—Å–æ–∫–∞—è (‚â•80%): {self.high_confidence_count}
  üü° –°—Ä–µ–¥–Ω—è—è (50-79%): {self.medium_confidence_count}
  üî¥ –ù–∏–∑–∫–∞—è (<50%): {self.low_confidence_count}

üìã –î–µ—Ç–∞–ª–∏ –ø–æ –∫–ª–∞—Å—Å–∞–º:"""

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å—ã –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –¥–µ—Ç–µ–∫—Ü–∏–π
        sorted_classes = self.class_counts.most_common()

        for class_name, count in sorted_classes[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø 10
            percentage = count / self.total_detections * 100

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            if is_food_class(class_name):
                icon = "üçΩÔ∏è"
            elif is_tableware_class(class_name):
                icon = "üç¥"
            else:
                icon = "üì¶"

            stats_text += f"\n  {icon} {class_name}: {count} ({percentage:.1f}%)"

        if len(sorted_classes) > 10:
            stats_text += f"\n  ... –∏ –µ—â–µ {len(sorted_classes) - 10} –∫–ª–∞—Å—Å–æ–≤"

        return stats_text


class VideoProcessor(QThread):
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ —Å YOLO –º–æ–¥–µ–ª—è–º–∏"""

    # –°–∏–≥–Ω–∞–ª—ã –¥–ª—è —Å–≤—è–∑–∏ —Å UI
    frame_ready = pyqtSignal(np.ndarray)
    progress = pyqtSignal(int)
    status = pyqtSignal(str)
    finished = pyqtSignal(str)
    statistics_updated = pyqtSignal(str)  # –ù–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

    def __init__(self):
        super().__init__()

        # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
        self.model_path = ""
        self.video_path = ""
        self.output_path = ""

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        self.running = False
        self.paused = False

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–µ—Ç–µ–∫—Ü–∏–∏
        self.confidence = 0.25
        self.iou = 0.45

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        self.font_scale = 1.5
        self.line_thickness = 3
        self.rotate_mov = True

        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –º–∞–ø–ø–∏–Ω–≥ –∫–ª–∞—Å—Å–æ–≤
        self.custom_class_mapping = {}

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏
        self.model_info = {}

        # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏
        self.detection_size = 640  # –í—Å–µ–≥–¥–∞ 640x640

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–µ—Ç–µ–∫—Ü–∏–π
        self.statistics = DetectionStatistics()

    def set_files(self, model_path, video_path, output_path=None):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—É—Ç–∏ —Ñ–∞–π–ª–æ–≤"""
        self.model_path = model_path
        self.video_path = video_path
        self.output_path = output_path

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª–∞—Å—Å—ã –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –º–æ–¥–µ–ª–∏
        if model_path and os.path.exists(model_path):
            self.load_model_classes(model_path)

    def set_detection_params(self, confidence=None, iou=None):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ—Ç–µ–∫—Ü–∏–∏"""
        if confidence is not None:
            self.confidence = confidence
        if iou is not None:
            self.iou = iou

    def set_display_params(self, font_scale=None, line_thickness=None, rotate_mov=None):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if font_scale is not None:
            self.font_scale = font_scale
        if line_thickness is not None:
            self.line_thickness = line_thickness
        if rotate_mov is not None:
            self.rotate_mov = rotate_mov

    def load_model_classes(self, model_path):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–ª–∞—Å—Å—ã –∏–∑ –º–æ–¥–µ–ª–∏"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∞—Å—Å–∞—Ö
            model = YOLO(model_path)
            self.model_info = {
                'names': getattr(model, 'names', {}),
                'path': model_path
            }

            print(f"üìã –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {Path(model_path).name}")
            if self.model_info['names']:
                print(f"   –ö–ª–∞—Å—Å–æ–≤ –≤ –º–æ–¥–µ–ª–∏: {len(self.model_info['names'])}")

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª–∞—Å—Å–æ–≤
                for i, (class_id, class_name) in enumerate(list(self.model_info['names'].items())[:5]):
                    print(f"   {class_id}: {class_name}")
                if len(self.model_info['names']) > 5:
                    print(f"   ... –∏ –µ—â–µ {len(self.model_info['names']) - 5}")

            # –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–∑ –º–æ–¥–µ–ª–∏
            if CYRILLIC_MAPPING_AVAILABLE:
                auto_detect_classes_from_model(model_path)

            # –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ YAML —Ñ–∞–π–ª–∞
            model_dir = Path(model_path).parent
            possible_yaml_files = []

            # –ò—â–µ–º –≤ –ø–∞–ø–∫–µ —Å –º–æ–¥–µ–ª—å—é –∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö –ø–∞–ø–∫–∞—Ö
            for search_dir in [model_dir, model_dir.parent, model_dir.parent.parent]:
                if search_dir.exists():
                    yaml_files = list(search_dir.glob("*dataset*.yaml")) + list(search_dir.glob("*data*.yaml"))
                    possible_yaml_files.extend(yaml_files)

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ YAML
            for yaml_file in possible_yaml_files:
                if yaml_file.exists():
                    print(f"üîç –ù–∞–π–¥–µ–Ω YAML —Ñ–∞–π–ª: {yaml_file}")
                    load_classes_from_yaml(yaml_file)
                    break

        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª–∞—Å—Å–æ–≤: {e}")

    def is_mov_file(self, video_path):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª MOV —Ñ–æ—Ä–º–∞—Ç–æ–º"""
        return Path(video_path).suffix.lower() in ['.mov', '.MOV']

    def resize_frame_for_detection(self, frame):
        """
        –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä –∫–∞–¥—Ä–∞ –¥–æ 640x640 –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π

        Args:
            frame: –ò—Å—Ö–æ–¥–Ω—ã–π –∫–∞–¥—Ä

        Returns:
            tuple: (–∫–∞–¥—Ä_640x640, –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç_–º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è, x_—Å–º–µ—â–µ–Ω–∏–µ, y_—Å–º–µ—â–µ–Ω–∏–µ)
        """
        original_height, original_width = frame.shape[:2]

        # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
        scale = min(self.detection_size / original_width, self.detection_size / original_height)

        # –ù–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
        new_width = int(original_width * scale)
        new_height = int(original_height * scale)

        # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä
        resized = cv2.resize(frame, (new_width, new_height), interpolation=cv2.INTER_LINEAR)

        # –°–æ–∑–¥–∞–µ–º –∫–∞–¥—Ä 640x640 —Å —á–µ—Ä–Ω—ã–º–∏ –ø–æ–ª–æ—Å–∞–º–∏
        result = np.zeros((self.detection_size, self.detection_size, 3), dtype=np.uint8)

        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        y_offset = (self.detection_size - new_height) // 2
        x_offset = (self.detection_size - new_width) // 2

        result[y_offset:y_offset + new_height, x_offset:x_offset + new_width] = resized

        return result, scale, x_offset, y_offset

    def adjust_detections_to_original(self, detections, scale, x_offset, y_offset, original_width, original_height):
        """
        –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–µ—Ç–µ–∫—Ü–∏–π –æ—Ç 640x640 –æ–±—Ä–∞—Ç–Ω–æ –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—é
        """
        if not detections or len(detections) == 0:
            return detections

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–º–µ—Å—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö
        adjusted_results = []

        for result in detections:
            if result.boxes is not None and len(result.boxes) > 0:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    if hasattr(result.boxes, 'data'):
                        # –ù–æ–≤—ã–µ –≤–µ—Ä—Å–∏–∏ ultralytics
                        original_data = result.boxes.data.clone()
                        boxes_data = original_data[:, :4]  # xyxy –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã

                        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                        boxes_data[:, [0, 2]] -= x_offset  # x –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                        boxes_data[:, [1, 3]] -= y_offset  # y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                        boxes_data[:, [0, 2]] /= scale  # x –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                        boxes_data[:, [1, 3]] /= scale  # y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã

                        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                        boxes_data[:, [0, 2]] = boxes_data[:, [0, 2]].clamp(0, original_width)
                        boxes_data[:, [1, 3]] = boxes_data[:, [1, 3]].clamp(0, original_height)

                        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                        original_data[:, :4] = boxes_data
                        result.boxes.data = original_data

                    else:
                        # –°—Ç–∞—Ä—ã–µ –≤–µ—Ä—Å–∏–∏ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
                        pass

                except Exception as e:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
                    pass

            adjusted_results.append(result)

        return adjusted_results

    def get_cyrillic_class_name_for_detection(self, class_id, original_name=None):
        """
        –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –Ω–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏
        –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:
        1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –º–∞–ø–ø–∏–Ω–≥
        2. COCO –º–∞–ø–ø–∏–Ω–≥ (–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–∑ JSON)
        3. –ê–Ω–≥–ª–∏–π—Å–∫–∏–π –º–∞–ø–ø–∏–Ω–≥ (—Å–∏–Ω–æ–Ω–∏–º—ã)
        4. Label Studio –º–∞–ø–ø–∏–Ω–≥ (CLASS_MAPPING)
        5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü—É
        6. Fallback
        """

        # 1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –º–∞–ø–ø–∏–Ω–≥ (–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        if class_id in self.custom_class_mapping:
            return self.custom_class_mapping[class_id]

        # 2. COCO –º–∞–ø–ø–∏–Ω–≥ –∏–∑ JSON —Ñ–∞–π–ª–∞
        if CYRILLIC_MAPPING_AVAILABLE:
            coco_name = get_coco_class_name(class_id)
            if coco_name:
                return coco_name

        # 3. –ê–Ω–≥–ª–∏–π—Å–∫–∏–π –º–∞–ø–ø–∏–Ω–≥ (—Å–∏–Ω–æ–Ω–∏–º—ã –∏–∑ JSON)
        if original_name:
            original_lower = str(original_name).lower().strip()
            synonym_result = get_class_by_synonym(original_lower)
            if synonym_result:
                return synonym_result

        # 4. Label Studio –º–∞–ø–ø–∏–Ω–≥ (CLASS_MAPPING)
        if class_id in CLASS_MAPPING:
            return CLASS_MAPPING[class_id]

        # 5. –ï—Å–ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–∂–µ –Ω–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if original_name and any(ord(char) > 127 for char in str(original_name)):
            return str(original_name)

        # 6. Fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ class_mapping
        return get_cyrillic_class_name(class_id, original_name)

    def draw_text_with_pil(self, img, text, position, conf=0.0):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã —á–µ—Ä–µ–∑ PIL"""
        try:
            from PIL import Image, ImageDraw, ImageFont
            import numpy as np

            # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ font_scale
            base_font_size = 32
            font_size = int(base_font_size * self.font_scale)

            # –¶–≤–µ—Ç–∞
            text_color = (255, 255, 255)  # –ë–µ–ª—ã–π —Ç–µ–∫—Å—Ç
            stroke_color = (0, 0, 0)  # –ß–µ—Ä–Ω–∞—è –æ–±–≤–æ–¥–∫–∞
            stroke_width = max(2, int(self.font_scale))

            # –û—á–∏—â–∞–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç
            try:
                # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
                clean_text = ''.join(char for char in text if ord(char) < 65536 and char.isprintable())
                if not clean_text or len(clean_text.strip()) == 0:
                    clean_text = f"–û–±—ä–µ–∫—Ç: {conf:.2f}"
            except Exception:
                clean_text = f"–û–±—ä–µ–∫—Ç: {conf:.2f}"

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º BGR –≤ RGB –¥–ª—è PIL
            img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
            pil_img = Image.fromarray(img_rgb)
            draw = ImageDraw.Draw(pil_img)

            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —à—Ä–∏—Ñ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
            font = None
            font_paths_to_try = [
                # Linux
                "/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf",
                "/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf",
                "/usr/share/fonts/truetype/liberation/LiberationSans-Bold.ttf",
                "/usr/share/fonts/truetype/liberation/LiberationSans-Regular.ttf",
            ]

            for font_path in font_paths_to_try:
                try:
                    if os.path.exists(font_path):
                        font = ImageFont.truetype(font_path, font_size)
                        break
                except Exception:
                    continue

            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å TTF —à—Ä–∏—Ñ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
            if font is None:
                try:
                    font = ImageFont.load_default()
                except Exception:
                    return self.draw_text_with_opencv(img, clean_text, position, conf)

            x, y = position

            # –†–∏—Å—É–µ–º –æ–±–≤–æ–¥–∫—É
            if stroke_width > 0:
                for adj_x in range(-stroke_width, stroke_width + 1):
                    for adj_y in range(-stroke_width, stroke_width + 1):
                        if adj_x != 0 or adj_y != 0:
                            try:
                                draw.text((x + adj_x, y + adj_y), clean_text, font=font, fill=stroke_color)
                            except Exception:
                                pass

            # –†–∏—Å—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
            try:
                draw.text((x, y), clean_text, font=font, fill=text_color)
            except Exception:
                draw.text((x, y), f"–ö–ª–∞—Å—Å: {conf:.2f}", font=font, fill=text_color)

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ BGR –¥–ª—è OpenCV
            img_with_text = cv2.cvtColor(np.array(pil_img), cv2.COLOR_RGB2BGR)
            return img_with_text

        except ImportError:
            return self.draw_text_with_opencv(img, text, position, conf)
        except Exception as e:
            return self.draw_text_with_opencv(img, text, position, conf)

    def draw_text_with_opencv(self, img, text, position, conf=0.0):
        """Fallback –º–µ—Ç–æ–¥ —Ä–∏—Å–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ OpenCV"""
        try:
            safe_text = text if isinstance(text, str) else f"–ö–ª–∞—Å—Å: {conf:.2f}"

            cv2.putText(img, safe_text, position,
                        cv2.FONT_HERSHEY_SIMPLEX, self.font_scale, (0, 0, 0),
                        self.line_thickness + 2)  # –ß–µ—Ä–Ω–∞—è –æ–±–≤–æ–¥–∫–∞
            cv2.putText(img, safe_text, position,
                        cv2.FONT_HERSHEY_SIMPLEX, self.font_scale, (255, 255, 255),
                        max(1, self.line_thickness - 1))  # –ë–µ–ª—ã–π —Ç–µ–∫—Å—Ç
        except Exception:
            cv2.putText(img, f"–û–±—ä–µ–∫—Ç: {conf:.2f}", position,
                        cv2.FONT_HERSHEY_SIMPLEX, 1.0, (255, 255, 255), 2)
        return img

    def draw_detections(self, frame, results):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –¥–µ—Ç–µ–∫—Ü–∏–π —Å –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        if not results or len(results) == 0:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –µ—Å–ª–∏ –Ω–µ—Ç –¥–µ—Ç–µ–∫—Ü–∏–π
            self.statistics.reset()
            self.statistics_updated.emit(self.statistics.get_statistics_text())
            return frame

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–∞–¥—Ä–∞
        self.statistics.reset()

        # –¶–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ–±—ä–µ–∫—Ç–æ–≤
        food_color = (0, 255, 0)  # –ó–µ–ª–µ–Ω—ã–π –¥–ª—è –µ–¥—ã
        tableware_color = (255, 0, 0)  # –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –ø–æ—Å—É–¥—ã
        default_color = (255, 255, 0)  # –ñ–µ–ª—Ç—ã–π –¥–ª—è –ø—Ä–æ—á–µ–≥–æ

        for result in results:
            boxes = result.boxes
            if boxes is None:
                continue

            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–ª–∞—Å—Å–æ–≤ –∏–∑ –º–æ–¥–µ–ª–∏
            model_class_names = self.model_info.get('names', {})

            for i, box in enumerate(boxes):
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Ä–∞–∑–Ω—ã–º–∏ –≤–µ—Ä—Å–∏—è–º–∏ ultralytics)
                    if hasattr(box, 'xyxy') and box.xyxy is not None:
                        x1, y1, x2, y2 = box.xyxy[0].cpu().numpy().astype(int)
                        conf = box.conf[0].cpu().numpy()
                        cls = int(box.cls[0].cpu().numpy())
                    elif hasattr(box, 'data') and box.data is not None:
                        # –î–ª—è –Ω–æ–≤—ã—Ö –≤–µ—Ä—Å–∏–π ultralytics
                        data = box.data.cpu().numpy()
                        x1, y1, x2, y2 = data[:4].astype(int)
                        conf = data[4]
                        cls = int(data[5])
                    else:
                        # –ï—Å–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                        continue

                    if conf < self.confidence:
                        continue

                    # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ –º–æ–¥–µ–ª–∏
                    original_class_name = model_class_names.get(cls, f"class_{cls}")

                    # –ü–æ–ª—É—á–∞–µ–º –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ —É–ª—É—á—à–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
                    cyrillic_class_name = self.get_cyrillic_class_name_for_detection(cls, original_class_name)

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è
                    if not cyrillic_class_name or len(str(cyrillic_class_name).strip()) == 0:
                        cyrillic_class_name = f"–∫–ª–∞—Å—Å_{cls}"

                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω –∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –æ–±—Ä–∞–∑—Ü—ã –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏, –Ω–æ –Ω–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                    background_variants = ['background', 'Background', 'BACKGROUND', 'bg', 'BG',
                                           '—Ñ–æ–Ω', '–§–æ–Ω', '–§–û–ù', '–∑–∞–¥–Ω–∏–π_–ø–ª–∞–Ω', '–∑–∞–¥–Ω–∏–π –ø–ª–∞–Ω', 'negative']
                    is_background = str(cyrillic_class_name).lower() in [variant.lower() for variant in
                                                                         background_variants]

                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–≤–∫–ª—é—á–∞—è —Ñ–æ–Ω –¥–ª—è –ø–æ–ª–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω—ã)
                    self.statistics.update(cyrillic_class_name, conf)

                    if is_background:
                        continue  # –ù–µ –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ñ–æ–Ω

                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞ –∏ —Ü–≤–µ—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                    if is_food_class(cyrillic_class_name):
                        icon = "üçΩÔ∏è"
                        color = food_color
                        thickness = self.line_thickness + 1
                    elif is_tableware_class(cyrillic_class_name):
                        icon = "üç¥"
                        color = tableware_color
                        thickness = self.line_thickness
                    else:
                        icon = "üì¶"
                        color = default_color
                        thickness = self.line_thickness

                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–≤–µ—Ç –∏–∑ JSON –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
                    try:
                        config_color = get_class_color(cyrillic_class_name)
                        if config_color and config_color != "#808080":
                            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º hex –≤ BGR
                            hex_color = config_color.lstrip('#')
                            rgb = tuple(int(hex_color[i:i + 2], 16) for i in (0, 2, 4))
                            color = (rgb[2], rgb[1], rgb[0])  # RGB -> BGR
                    except Exception:
                        pass  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ü–≤–µ—Ç

                    # –†–∏—Å—É–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
                    cv2.rectangle(frame, (x1, y1), (x2, y2), color, thickness)

                    # –°–æ–∑–¥–∞–µ–º –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫—É—é –º–µ—Ç–∫—É —Å –∏–∫–æ–Ω–∫–æ–π –¥–ª—è –≤—ã—Å–æ–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
                    if conf >= 0.8:
                        label = f"{icon} {cyrillic_class_name}: {conf:.2f}"
                    else:
                        label = f"{cyrillic_class_name}: {conf:.2f}"

                    # –†–∏—Å—É–µ–º —Ñ–æ–Ω –¥–ª—è —Ç–µ–∫—Å—Ç–∞
                    label_size = cv2.getTextSize(label, cv2.FONT_HERSHEY_SIMPLEX, self.font_scale * 0.8, 2)[0]

                    bg_x1 = x1
                    bg_y1 = y1 - label_size[1] - 10
                    bg_x2 = x1 + label_size[0] + 10
                    bg_y2 = y1

                    # –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω
                    overlay = frame.copy()
                    cv2.rectangle(overlay, (bg_x1, bg_y1), (bg_x2, bg_y2), color, -1)
                    alpha = 0.7
                    cv2.addWeighted(overlay, alpha, frame, 1 - alpha, 0, frame)

                    # –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
                    frame = self.draw_text_with_pil(frame, label, (x1 + 5, y1 - label_size[1] - 5), conf=conf)

                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ—Ç–µ–∫—Ü–∏–∏ {i}: {e}")
                    continue

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.statistics_updated.emit(self.statistics.get_statistics_text())

        return frame

    def verify_video_file(self, video_path):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞"""
        try:
            cap = cv2.VideoCapture(video_path)
            if cap.isOpened():
                frame_count = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))
                fps = cap.get(cv2.CAP_PROP_FPS)
                width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
                height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))

                if frame_count > 0 and fps > 0:
                    duration = frame_count / fps

                    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏–¥–µ–æ
                    video_info = {
                        'width': width,
                        'height': height,
                        'frame_count': frame_count,
                        'fps': fps,
                        'duration': duration,
                        'is_valid': True
                    }

                    cap.release()
                    return video_info
                else:
                    cap.release()
                    return {'is_valid': False, 'error': '–ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª'}
            else:
                return {'is_valid': False, 'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª'}

        except Exception as e:
            return {'is_valid': False, 'error': str(e)}

    def pause_resume(self):
        """–ü–∞—É–∑–∞/–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å"""
        self.paused = not self.paused

    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"""
        self.running = False

    def run(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º –¥–µ—Ç–µ–∫—Ü–∏–∏ 640x640"""
        self.running = True

        try:
            # –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å
            self.status.emit("–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏...")
            model = YOLO(self.model_path)
            self.status.emit("–ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

            # –í—ã–≤–µ—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∞—Å—Å–∞—Ö –º–æ–¥–µ–ª–∏
            if hasattr(model, 'names') and model.names:
                print(f"üìã –ö–ª–∞—Å—Å—ã –≤ –º–æ–¥–µ–ª–∏: {len(model.names)}")
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –º–æ–¥–µ–ª–∏
                if len(model.names) == 80 and 'person' in model.names.values():
                    print("üéØ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è COCO –º–æ–¥–µ–ª—å")
                    self.status.emit("COCO –º–æ–¥–µ–ª—å - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è COCO –º–∞–ø–ø–∏–Ω–≥ –∏–∑ JSON")
                elif len(model.names) == 31:
                    print("üçΩÔ∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –º–æ–¥–µ–ª—å –¥–ª—è –±–ª—é–¥ (31 –∫–ª–∞—Å—Å)")
                    self.status.emit("–ú–æ–¥–µ–ª—å –¥–ª—è –±–ª—é–¥ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ JSON")
                else:
                    print(f"üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –º–æ–¥–µ–ª—å ({len(model.names)} –∫–ª–∞—Å—Å–æ–≤)")
                    self.status.emit(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –º–æ–¥–µ–ª—å ({len(model.names)} –∫–ª–∞—Å—Å–æ–≤)")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–≤–æ—Ä–∞—á–∏–≤–∞—Ç—å –≤–∏–¥–µ–æ
            should_rotate = self.is_mov_file(self.video_path) and self.rotate_mov
            if should_rotate:
                self.status.emit("–û–±–Ω–∞—Ä—É–∂–µ–Ω MOV —Ñ–∞–π–ª - –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω –ø–æ–≤–æ—Ä–æ—Ç –Ω–∞ 90¬∞")

            # –û—Ç–∫—Ä—ã—Ç—å –≤–∏–¥–µ–æ
            self.status.emit("–û—Ç–∫—Ä—ã—Ç–∏–µ –≤–∏–¥–µ–æ...")
            cap = cv2.VideoCapture(self.video_path)

            if not cap.isOpened():
                self.finished.emit("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –≤–∏–¥–µ–æ")
                return

            total_frames = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))
            fps = cap.get(cv2.CAP_PROP_FPS)
            width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
            height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))

            # –ï—Å–ª–∏ –ø–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º, –º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –º–µ—Å—Ç–∞–º–∏ –¥–ª—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ
            output_width = height if should_rotate else width
            output_height = width if should_rotate else height

            self.status.emit(f"–í–∏–¥–µ–æ: {width}x{height} ‚Üí –î–µ—Ç–µ–∫—Ü–∏—è: 640x640, {total_frames} –∫–∞–¥—Ä–æ–≤, {fps:.1f} FPS")
            if should_rotate:
                self.status.emit(f"–ü–æ—Å–ª–µ –ø–æ–≤–æ—Ä–æ—Ç–∞: {output_width}x{output_height}")

            # –í—ã—Ö–æ–¥–Ω–æ–µ –≤–∏–¥–µ–æ
            out = None
            if self.output_path:
                output_ext = Path(self.output_path).suffix.lower()

                if output_ext == '.mp4':
                    fourcc = cv2.VideoWriter_fourcc(*'mp4v')
                elif output_ext == '.avi':
                    fourcc = cv2.VideoWriter_fourcc(*'XVID')
                elif output_ext == '.mov':
                    fourcc = cv2.VideoWriter_fourcc(*'mp4v')
                elif output_ext == '.mkv':
                    fourcc = cv2.VideoWriter_fourcc(*'XVID')
                elif output_ext == '.wmv':
                    fourcc = cv2.VideoWriter_fourcc(*'WMV2')
                else:
                    fourcc = cv2.VideoWriter_fourcc(*'mp4v')

                self.status.emit(f"–°–æ–∑–¥–∞–Ω–∏–µ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {Path(self.output_path).name}")
                out = cv2.VideoWriter(self.output_path, fourcc, fps, (output_width, output_height))

                if not out.isOpened():
                    self.status.emit("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å VideoWriter, –ø—Ä–æ–±—É—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∫–æ–¥–µ–∫...")
                    fourcc_alt = cv2.VideoWriter_fourcc(*'MJPG')
                    out = cv2.VideoWriter(self.output_path, fourcc_alt, fps, (output_width, output_height))
                    if not out.isOpened():
                        self.finished.emit("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤—ã—Ö–æ–¥–Ω–æ–π –≤–∏–¥–µ–æ —Ñ–∞–π–ª")
                        return

            frame_count = 0

            while self.running:
                if self.paused:
                    time.sleep(0.1)
                    continue

                ret, frame = cap.read()
                if not ret:
                    break

                frame_count += 1

                # –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –∫–∞–¥—Ä, –µ—Å–ª–∏ —ç—Ç–æ MOV —Ñ–∞–π–ª
                if should_rotate:
                    frame = rotate_frame_90_clockwise(frame)

                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–∞–∑–º–µ—Ä—ã –∫–∞–¥—Ä–∞ (–ø–æ—Å–ª–µ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –ø–æ–≤–æ—Ä–æ—Ç–∞)
                current_height, current_width = frame.shape[:2]

                # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –∫–∞–¥—Ä–∞ –¥–æ 640x640 –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏
                detection_frame, scale, x_offset, y_offset = self.resize_frame_for_detection(frame)

                # –î–µ—Ç–µ–∫—Ü–∏—è –Ω–∞ –∫–∞–¥—Ä–µ 640x640
                results = model(detection_frame, conf=self.confidence, iou=self.iou, verbose=False)

                # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–µ—Ç–µ–∫—Ü–∏–π –æ–±—Ä–∞—Ç–Ω–æ –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É —Ä–∞–∑–º–µ—Ä—É
                results = self.adjust_detections_to_original(
                    results, scale, x_offset, y_offset, current_width, current_height
                )

                # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –¥–µ—Ç–µ–∫—Ü–∏–π –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –∫–∞–¥—Ä–µ (—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏)
                processed_frame = self.draw_detections(frame, results)

                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
                if out is not None:
                    out.write(processed_frame)

                # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞–¥—Ä–∞
                self.frame_ready.emit(processed_frame)

                # –ü—Ä–æ–≥—Ä–µ—Å—Å
                progress_val = int((frame_count / total_frames) * 100)
                self.progress.emit(progress_val)

                # –ü–∞—É–∑–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                self.msleep(30)

            cap.release()
            if out:
                out.release()

            rotation_info = " (—Å –ø–æ–≤–æ—Ä–æ—Ç–æ–º –Ω–∞ 90¬∞)" if should_rotate else ""
            self.finished.emit(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!{rotation_info} (–î–µ—Ç–µ–∫—Ü–∏—è: 640x640)")

        except Exception as e:
            self.finished.emit(f"–û—à–∏–±–∫–∞: {e}")

    def get_class_mapping_info(self):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∫–ª–∞—Å—Å–∞—Ö"""
        info = {
            'total_classes': len(CLASS_MAPPING),
            'mapping': dict(CLASS_MAPPING),
            'cyrillic_available': CYRILLIC_MAPPING_AVAILABLE,
            'pil_available': PIL_AVAILABLE,
            'model_info': self.model_info,
            'detection_resolution': f"{self.detection_size}x{self.detection_size}"
        }

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–ø–∞–º –∫–ª–∞—Å—Å–æ–≤
        food_count = 0
        tableware_count = 0
        other_count = 0

        for class_name in CLASS_MAPPING.values():
            if is_food_class(class_name):
                food_count += 1
            elif is_tableware_class(class_name):
                tableware_count += 1
            else:
                other_count += 1

        info['statistics'] = {
            'food_classes': food_count,
            'tableware_classes': tableware_count,
            'other_classes': other_count
        }

        return info