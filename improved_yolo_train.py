#!/usr/bin/env python3
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –æ–±—É—á–µ–Ω–∏—è YOLO –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–º –∫–∞—á–µ—Å—Ç–≤–∞
"""

import os
import sys
import json
import requests
import yaml
import shutil
from pathlib import Path
import numpy as np
from PIL import Image
import random
from tqdm import tqdm
import cv2

# –£–ª—É—á—à–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
IMPROVED_CONFIG = {'epochs': 1000, 'batch_size': 16, 'image_size': 640, 'learning_rate': 0.001, 'device': 'cpu', 'model': 'yolo11s.pt', 'patience': 50, 'augmentation': {'enabled': True, 'multiplier': 12, 'min_visibility': 0.7, 'min_area': 0.03, 'geometric': {'horizontal_flip': 0.5, 'vertical_flip': 0.1, 'rotate_limit': 20, 'rotate_prob': 0.6, 'shift_limit': 0.1, 'scale_limit': 0.2, 'shear_prob': 0.2}, 'color': {'brightness_limit': 0.3, 'contrast_limit': 0.3, 'brightness_contrast_prob': 0.6, 'hue_shift_limit': 15, 'sat_shift_limit': 30, 'val_shift_limit': 15, 'hsv_prob': 0.5}, 'blur_noise': {'blur_limit': 5, 'blur_prob': 0.3, 'gauss_noise_var': (10, 50), 'noise_prob': 0.3}, 'weather': {'rain_prob': 0.15, 'fog_prob': 0.15, 'sun_flare_prob': 0.1}}}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Label Studio (–æ–±–Ω–æ–≤–∏—Ç–µ –ø–æ–¥ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ)
SESSION_ID = ".eJxVj81uxCAMhN-FcxLJBB9xyOXeZIgMmoRvBKiRSu6u-e6Hay95sz_gbzZNc0ZOZGEeZkCPvDVDbS21CDyB5nZwHbjin1JGO5GOFFB9wxpyW-43MrCM7lHPZ8xpTXbVqGCXl0HhUd2SB69yWq-Cx_Scx8naz4G6YmuC_IK15cDmdR7RDswwvtQyf2eP-8fK-ATYoW_0OcnLcKe3DNBkInDGNKFAIJYKkI1iL0nHwganRCEQmleXV4ClVyqJp0IKltGL4fY_HD5mlqLXp7x9f41sv:1uWTX9:QTo4Fp90Idh9tTt6izl8sM6VZuQNYTCjes0asHuJOKk"
LABEL_STUDIO_URL = "http://localhost:8080"
PROJECT_NAME = "New Project #3"
OUTPUT_DIR = "./improved_yolo_dataset_v2"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫
try:
    from ultralytics import YOLO
    import albumentations as A
    from albumentations.pytorch import ToTensorV2
    print("‚úÖ –í—Å–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install ultralytics albumentations opencv-python")
    sys.exit(1)

# [–ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ–±—É—á–µ–Ω–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏]
# –§—É–Ω–∫—Ü–∏–∏ setup_session, get_project_tasks, etc. –æ—Å—Ç–∞—é—Ç—Å—è —Ç–µ–º–∏ –∂–µ

def create_improved_albumentations_pipeline():
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏"""
    aug_config = IMPROVED_CONFIG['augmentation']
    transforms = []

    # –í–∫–ª—é—á–∞–µ–º –≤—Å–µ –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
    transforms.extend([
        A.HorizontalFlip(p=aug_config['geometric']['horizontal_flip']),
        A.VerticalFlip(p=aug_config['geometric']['vertical_flip']),
        A.Rotate(
            limit=aug_config['geometric']['rotate_limit'],
            p=aug_config['geometric']['rotate_prob'],
            border_mode=cv2.BORDER_CONSTANT,
            value=0
        ),
        A.ShiftScaleRotate(
            shift_limit=aug_config['geometric']['shift_limit'],
            scale_limit=aug_config['geometric']['scale_limit'],
            rotate_limit=0,
            p=0.5,
            border_mode=cv2.BORDER_CONSTANT,
            value=0
        ),
    ])

    # –í–∫–ª—é—á–∞–µ–º —Ü–≤–µ—Ç–æ–≤—ã–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
    transforms.extend([
        A.RandomBrightnessContrast(
            brightness_limit=aug_config['color']['brightness_limit'],
            contrast_limit=aug_config['color']['contrast_limit'],
            p=aug_config['color']['brightness_contrast_prob']
        ),
        A.HueSaturationValue(
            hue_shift_limit=aug_config['color']['hue_shift_limit'],
            sat_shift_limit=aug_config['color']['sat_shift_limit'],
            val_shift_limit=aug_config['color']['val_shift_limit'],
            p=aug_config['color']['hsv_prob']
        ),
    ])

    # –†–∞–∑–º—ã—Ç–∏–µ –∏ —à—É–º
    transforms.extend([
        A.OneOf([
            A.Blur(blur_limit=aug_config['blur_noise']['blur_limit'], p=1.0),
            A.GaussianBlur(blur_limit=aug_config['blur_noise']['blur_limit'], p=1.0),
            A.MotionBlur(blur_limit=aug_config['blur_noise']['blur_limit'], p=1.0),
        ], p=aug_config['blur_noise']['blur_prob']),

        A.OneOf([
            A.GaussNoise(var_limit=aug_config['blur_noise']['gauss_noise_var'], p=1.0),
            A.ISONoise(color_shift=(0.01, 0.02), intensity=(0.1, 0.3), p=1.0),
        ], p=aug_config['blur_noise']['noise_prob'])
    ])

    # –ü–æ–≥–æ–¥–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
    weather_transforms = []
    if aug_config['weather']['rain_prob'] > 0:
        weather_transforms.append(
            A.RandomRain(
                slant_lower=-10, slant_upper=10, drop_length=10, drop_width=1,
                drop_color=(200, 200, 200), blur_value=1, brightness_coefficient=0.8,
                rain_type="drizzle", p=1.0
            )
        )

    if aug_config['weather']['fog_prob'] > 0:
        weather_transforms.append(
            A.RandomFog(fog_coef_lower=0.1, fog_coef_upper=0.3, alpha_coef=0.1, p=1.0)
        )

    if weather_transforms:
        transforms.append(A.OneOf(weather_transforms, p=0.2))

    composition = A.Compose(
        transforms,
        bbox_params=A.BboxParams(
            format='yolo',
            label_fields=['class_labels'],
            min_visibility=aug_config['min_visibility'],
            min_area=aug_config['min_area'],
        )
    )

    print(f"‚úÖ –°–æ–∑–¥–∞–Ω —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω —Å {len(transforms)} —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è–º–∏")
    return composition

if __name__ == "__main__":
    print("üöÄ –ó–ê–ü–£–°–ö –£–õ–£–ß–®–ï–ù–ù–û–ì–û –û–ë–£–ß–ï–ù–ò–Ø YOLO")
    print("=" * 50)
    print("–û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    print(f"–ù–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:")
    print(f"- –≠–ø–æ—Ö–∏: {IMPROVED_CONFIG['epochs']}")
    print(f"- –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {IMPROVED_CONFIG['image_size']}")
    print(f"- –ú–Ω–æ–∂–∏—Ç–µ–ª—å –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏: {IMPROVED_CONFIG['augmentation']['multiplier']}")
    print(f"- –ú–æ–¥–µ–ª—å: {IMPROVED_CONFIG['model']}")

    # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ –æ–±—É—á–µ–Ω–∏—è
    # main()
